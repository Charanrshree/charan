AWSTemplateFormatVersion: '2010-09-09'
Description: Basic VPC Setup with EC2 Instance

Parameters:
  InstanceType:
    Description: EC2 Instance Type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
  LatestAmiId:
    Description: AMI for the EC2 Instance
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  # The Wait Condition Handle
  GitSyncSetupWaitConditionHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'

  # The Wait Condition
  GitSyncSetupWaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Handle: !Ref GitSyncSetupWaitConditionHandle
      Timeout: '300'  # Wait for 300 seconds (5 minutes)
      Count: '1'      # Number of signals to expect

  # Create a VPC
  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  # Create a public subnet
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  # Create a private subnet
  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [ 0, !GetAZs '']
      Tags:
        - Key: Name
          Value: PrivateSubnet

  # Create an Internet Gateway
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: 
      Tags:
        - Key: Name
          Value: MyInternetGateway

  # Attach Internet Gateway to VPC
  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Create a Security Group
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'

  # Create an EC2 instance
  MyEC2Instance:
    Type: 'AWS::EC2::Instance'
    DependsOn: GitSyncSetupWaitConditionHandle  # Ensure the Wait Condition is created first
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId  # Ensure you define this parameter
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Your setup commands here
          # Send a signal to the WaitCondition
          /usr/bin/aws cloudformation signal-resource --stack-name ${AWS::StackName} --logical-resource-id GitSyncSetupWaitCondition --unique-id $(curl -s http://169.254.169.254/latest/meta-data/instance-id)
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: MyEC2Instance

Outputs:
  VPCId:
    Description: The ID of the VPC
    Value: !Ref MyVPC
  PublicSubnetId:
    Description: The ID of the Public Subnet
    Value: !Ref PublicSubnet
  EC2InstanceId:
    Description: The ID of the EC2 Instance
    Value: !Ref MyEC2Instance
